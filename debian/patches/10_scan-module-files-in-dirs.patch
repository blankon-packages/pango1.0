Index: pango-1.36.0/pango/modules.c
===================================================================
--- pango-1.36.0.orig/pango/modules.c	2013-10-21 13:30:54.001114652 +0200
+++ pango-1.36.0/pango/modules.c	2013-10-21 13:30:53.997114576 +0200
@@ -40,6 +40,9 @@
 #define PANGO_MODULE(module) (G_TYPE_CHECK_INSTANCE_CAST ((module), PANGO_TYPE_MODULE, PangoModule))
 #define PANGO_IS_MODULE(module)  (G_TYPE_CHECK_INSTANCE_TYPE ((module), PANGO_TYPE_MODULE))
 
+#define MODULEFILEEXT ".modules"
+#define MODULEFILEEXT_LEN ((int) strlen (MODULEFILEEXT))
+
 typedef struct _PangoMapInfo PangoMapInfo;
 typedef struct _PangoEnginePair PangoEnginePair;
 typedef struct _PangoSubmap PangoSubmap;
@@ -578,13 +581,40 @@
 
   while (n-- > 0)
     {
-      module_file = g_fopen (files[n], "r");
-      if (module_file)
+      GDir *dir = g_dir_open (files[n], 0, NULL);
+      if (dir)
+	{
+	  const char *dent;
+
+	  while ((dent = g_dir_read_name (dir)))
+	    {
+	      int len = strlen (dent);
+	      if (len > MODULEFILEEXT_LEN && strcmp (dent + len - MODULEFILEEXT_LEN, MODULEFILEEXT) == 0)
+		{
+		  gchar *pathname = g_build_filename (files[n], dent, NULL);
+		  module_file = g_fopen (pathname, "r");
+		  if (module_file)
+		    {
+		      const gchar *module_file_dir = g_path_get_dirname (files[n]);
+		      process_module_file(module_file, module_file_dir);
+		      g_free ((gpointer) module_file_dir);
+		      fclose(module_file);
+		    }
+		  g_free (pathname);
+		}
+	    }
+	  g_dir_close (dir);
+	}
+      else
 	{
-	  const gchar *module_file_dir = g_path_get_dirname (files[n]);
-	  process_module_file (module_file, module_file_dir);
-	  g_free ((gpointer) module_file_dir);
-	  fclose(module_file);
+	  module_file = g_fopen (files[n], "r");
+	  if (module_file)
+	    {
+	      const gchar *module_file_dir = g_path_get_dirname (files[n]);
+	      process_module_file(module_file, module_file_dir);
+	      g_free ((gpointer) module_file_dir);
+	      fclose(module_file);
+	    }
 	}
     }
 
